// String클래스의 생성자와 메서드
// 1. String(String s) : 주어진 문자열(s)을 갖는 String인스턴스를 생성한다. (생성자)
//    ex) String s = new String("Hello");
//    ex result) s = "Hello"
// 2. String(char[] value) : 주어진 문자열(value)을 갖는 String 인스턴스를 생성한다. (생성자)
//     - char[] -> String = String( )
//     - String -> char[] = toCharArray( )
//    ex) char[] c = {"H","e","l","l","o"};
//        String s = new String(c); 
//    ex result) s = "Hello"
// 3. String(StringBuffer buf) : StringBuffer인스턴스가 갖고 있는 문자열과 같은 내용의 String인스턴스를 생성한다. (생성자)
//    - StirngBuffer는 내용이  변경가능한 문자열이다.
//    - StringBuffer -> String = String(StringBuffer buf)
//	  - String <- StringBuffer = StringBuffer(String str)
//    ex) StringBuffer sb = new StringBuffer("Hello");
//        String s = new String(sb);
//    ex result) s = "Hello"
// 4. char charAt(int index) : 지정된 위치(index)에 있는 문자 1개를 알려준다.
//    ex) String s = "Hello";
//        String n = "0123456";
//        char c = s.charAt(1);  >> 'e'
//        char c2 = n.charAt(1); >> '1'
// 5. int compareTo(String str) : 문자열(str)과 사전순서로 비교한다. 같으면 0을 사전순으로 이전이면 음수, 이후명 양수를 반환한다.
//    ex) int i = "aaa".compareTo("aaa"); >> 0
//        int i2 = "aaa".compareTo("bbb); >> -1
//        int i3 = "bbb".compareTo("aaa"); >> 1
// 6. String  concat(String str) : 문자열(str)을 뒤에 덧붙인다.
//    ex) String s = "Hello";
//        String s2 = s.concat(" World);
//    ex result) s2 = "Hello World"
// 7. boolean contains(charSequence s) : 지정된 문자열(s)이 포함되어 있는지 검사한다.
//    ex) String s = "asdf";
//        boolean b = s.contains("as");
//    ex result) b = true;
// 8. boolean equals(Object obj) : 매개변수로 받은 문자열과 String인스턴스의 문자열을 비교한다.
//    ex) String s = "Hello";
//        boolean b1 = s.equals("Hello"); // true
//        boolean b2 = s.equals("hello"); // false
// 9. boolean equalsIgnoreCass(String str) : 문자열과 String인스턴스의 문자열을 대소문자 없이 비교한다.
//    ex) String s = "Hello";
//        boolean b1 = s.equalsIgbnoreCase("HELLO") >> true
//        boolean b2 = s.equalsIgbnoreCase("hello") >> true
// 10. int indexOf(int ch) : 주어진 문자(ch)가 문자열에 존재하는지 확인 하여 위치를 알려준다.
//     ex) String s = "Hello;
//         int idx1 = s.indexOf('0'); >> 4
//         int idx2 = s.indexOf('z'); >> -1
// 11. boolean endWith(Stirng suffix) : 지정된 문자열(suffix)로 끝나는지 검사한다.
//     - 반대로  지정된 문자열로 시작하는 지 검사하는 것은 boolean startWith(String suffix)
//     ex) String file = "Hello.txt";
//         boolean b = file.endWith("txt"); >> true
// 12. int indexOf(int ch, int pos) : 주어진 문자(ch)가 문자열에 존재하는지 지정된 위치(pos)부터 확인하며 위치를 알려준다.
//                                    못 찾으면 -1을 반환한다.
//     ex) String s = "Hello";
//         int idx1 = s.indexOf('e',0); >> 1
//             - H부터 시작해서 찾는다 e는 인덱스 1번에 존재한다.
//         int idx2 = s.indexof('e',2); >> -1
//             - l부터 시작해서 찾는다 e는 존재하지 않는다. 
// 13. int indexOf(String str) : 주어진 문자열이 존재하는지 확인하여 그 위치를 알려준다. 없으면 -1을 반환한다.
//     ex) String s = "ABCDEFG";
//         int idx = s.indexOf("CD"); >> 2
//             - 문자열(str)이 존재하면 가장 앞에 인덱스를 반환한다. 
// 14. int lastIndexOf(int ch) : 지정된 문자 또는 문자코드를 문자열의 오른쪽 끝에서부터 찾아서 위치를 반환한다. 없으면 -1을 반환한다.
//     ex) String s = "java.lang.Object";
//         int idx1 = s.lastIndexOf('.'); >> 9
//         int idx2 = s.indexOf('.') >> 4
// 15. int lastIndexOf(String str) : 지정된 문자열을 인스턴스의 문자열 오른쪽 끝에서 부터 찾아서 위치를 반환한다. 없으면 -1을 반환한다.
//     ex) String s = "java.lang.java";
//         int idx1 = s.lastIndexOf("java"); >> 10
//         int idx1 = s.indexOf("java"); >> 0
// 16. int length() : 문자열의 길이를 알려준다.
//     ex) String s = "Hello";
//         int length = s.length(); >> 5
// 17. String[] split(String regex) : 문자열을 지정된 분리자(refex)로 나누어 문자열 배열에 담아 반환한다.
//     ex) String animals = "dog,cat,bear";
//         String[] arr = animals.split(",");
//     ex result) arr[0] = "dog" arr[1] = "cat" arr[2] = "bear"
// 18. String[] split(String regex, int limit) : 문자열을 지정된 분리자로 나누어 문자열 배열이 반환한다. 단, 문자열 전체를 지정된 수(limit)로 자른다.
//     ex) String animals = "dog,cat,bear";
//         String[] arr = animals.split(",",2);
//     ex result) arr[0] = "dog" arr[1] = "cat,bear"
// 19. boolean startWith(String prefix) : 주어진 문자열로 시작하는지 검사한다.
//     ex) String s = "java.lang.Object";
//         boolean b1 = s.startWith("java"); >> true
//         boolean b2 = s.startWith("lang"); >> false
// 20. String substring(int begin) : 문자열에 선언한 위치(begin)부터 끝까지의 문자열을 반환한다.
// 21. String substring(int begin, int end) : 문자열에 선언한 위치(begin)부터 마지막 위치(end)전까지 문자열을 반환한다.
//     ex) String s = "java.lang.Object";
//         String c = s.substring(10); >> Object
//         String d = s.substring(5,9); >> lang
// 22. String toLowerCase() : String 인스턴스에 저장되어있는 모든 문자열을 소문자로 변환하여 반환한다.
//     ex) String s = "HELLO";
//         String s1 = s.toLowerCase(); >> "hello"
// 23. String toUpperCase(); : String 인스턴스에 저장되어있는 모든 문자열을 대문자로 변환하여 반환한다.
//     ex) String s = "hello";
//         String s2 = s.toUpperCase(); >> "HELLO"
// 24. String trim() : 문자열 외쪽끝과 오른쪽끝에 있는 공백을 없앤 결과를 반환한다.(중간에 있는 공백은 제거되지 않는다.)
//     ex) String s = "    hello world";
//         String s2 = s.trim(); >> "hello world"
// 25. static String valueOf(value) : 지정된 값(value)을 문자열로 변환하여 반환한다. (참조변수 일 경우 toSting()을 호출한 결과를 반환한다.)
//     ex) String a = String.valueOf(true); >> "true"
//         String b = String.valueOf("A") >> "A"
//         String c = String.valueOf(10) >> "10"
//         String d = String.valueOf("10L") >> "10"
//         String d = String.valueOf("10f") >> "10.0"
//         String d = String.valueOf("10.0") >> "10.0"
//
//         java.util.Date dd = new java.util.Date();
//         String date = String.valueOf(dd); >> "Wed ....";
//         Date는 요알 월 일 시간 .. 순으러 정보를 가지고 있다. 